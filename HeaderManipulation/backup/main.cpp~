#include <iostream>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// While there are tokens to be read:
// 
//     Read a token.
//     If the token is a number, then add it to the output queue.
//     If the token is a function token, then push it onto the stack.
//     If the token is a function argument separator (e.g., a comma):
// 
//         Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue. 
//         If no left parentheses are encountered, either the separator was misplaced or parentheses were mismatched.
// 
//     If the token is an operator, o1, then:
// 
//         while there is an operator token, o2, at the top of the stack, and
// 
//                 either o1 is left-associative and its precedence is less than or equal to that of o2,
//                 or o1 is right-associative and its precedence is less than that of o2,
// 
//             pop o2 off the stack, onto the output queue;
// 
//         push o1 onto the stack.
// 
//     If the token is a left parenthesis, then push it onto the stack.
//     If the token is a right parenthesis:
// 
//         Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.
//         Pop the left parenthesis from the stack, but not onto the output queue.
//         If the token at the top of the stack is a function token, pop it onto the output queue.
//         If the stack runs out without finding a left parenthesis, then there are mismatched parentheses.
// 
// When there are no more tokens to read:
// 
//     While there are still operator tokens in the stack:
// 
//         If the operator token on the top of the stack is a parenthesis, then there are mismatched parentheses.
//         Pop the operator onto the output queue.
// 
// Exit.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#include <stdio.h>
#include <string>
#include <vector>

unsigned TokenizeString(const std::string& i_source,
    					const std::string& i_seperators,
    					bool i_discard_empty_tokens,
    					std::vector<std::string>& o_tokens)
{
    unsigned prev_pos = 0;
    unsigned pos = 0;
    unsigned number_of_tokens = 0;
    o_tokens.clear();
    pos = i_source.find_first_of(i_seperators, pos);
    while (pos != std::string::npos)
    {
    	std::string token = i_source.substr(prev_pos, pos - prev_pos);
        std::cout << token << std::endl;
    	if (!i_discard_empty_tokens || token != "")
    	{
    		o_tokens.push_back(i_source.substr(prev_pos, pos - prev_pos));
    		number_of_tokens++;
    	}

    	pos++;
    	prev_pos = pos;
    	pos = i_source.find_first_of(i_seperators, pos);
    }

    if (prev_pos < i_source.length())
    {
    	o_tokens.push_back(i_source.substr(prev_pos));
    	number_of_tokens++;
    }

    return number_of_tokens;
}

int main()
{
    std::string str( "5 + 4 = 3" );
    std::vector < std::string > out;
    TokenizeString(str,"+",false,out);
    for ( int k(0)
        ; k < out.size()
        ; ++k
        )
    {
        std::cout << out[k] << std::endl;
    }
    return 0;
}

